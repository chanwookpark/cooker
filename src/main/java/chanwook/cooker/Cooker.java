package chanwook.cooker;import javax.servlet.http.Cookie;import java.util.HashMap;import java.util.Map;/** * Created by chanwook on 2014. 3. 1.. */public class Cooker {    private static final String DEFAULT_CHARSET_NAME = "UTF-8";    private static final String DEFAULT_COOKIE_VALUE_DELIMITER = "~";    private Map<String, Cookie> cookieMap = new HashMap<String, Cookie>();    private String charsetName = DEFAULT_CHARSET_NAME;    private String cookieValueDelimiter = DEFAULT_COOKIE_VALUE_DELIMITER;    public Cooker() {    }    public Cooker(String charsetName) {        this.charsetName = charsetName;    }    public CookiePrototype cooking(String key, String value) {        Cookie cc = new Cookie(key, value);        cookieMap.put(key, cc);        return new CookiePrototype(key, this);    }    public CookiePrototype cooking(Cookie cookie) {        cookieMap.put(cookie.getName(), cookie);        return new CookiePrototype(cookie.getName(), this);    }    /**     * 두 번째 파라미터로 전달되는 Map은 delimited로 구분되는 String 문자열로 변환되어 쿠키의 값으로 전달됨     *     * @param key     * @param valueMap     * @return     */    public CookiePrototype cooking(String key, Map<String, String> valueMap) {        StringBuilder b = new StringBuilder();        for (Map.Entry<String, String> e : valueMap.entrySet()) {            b.append(e.getKey());            b.append("=");            b.append(e.getValue());            b.append(cookieValueDelimiter);        }        String cookieValue = b.toString();        if (cookieValue.endsWith(cookieValueDelimiter)) {            cookieValue = cookieValue.substring(0, cookieValue.length() - 1);        }        return cooking(key, cookieValue);    }    public Cookie getCookie(String key) {        return cookieMap.get(key);    }    public CookiePrototype getPrototype(String key) {        return new CookiePrototype(key, this);    }    public String getCharsetName() {        return charsetName;    }    public void setCharsetName(String charsetName) {        this.charsetName = charsetName;    }}